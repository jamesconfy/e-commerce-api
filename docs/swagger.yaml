basePath: /api/v1
definitions:
  forms.CartItem:
    properties:
      product_id:
        type: string
      quantity:
        minimum: 1
        type: integer
    required:
    - quantity
    type: object
  forms.EditProduct:
    properties:
      description:
        minLength: 10
        type: string
      image:
        type: string
      name:
        minLength: 1
        type: string
      price:
        minimum: 0.1
        type: number
    type: object
  forms.Login:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  forms.Product:
    properties:
      description:
        minLength: 10
        type: string
      image:
        type: string
      name:
        minLength: 1
        type: string
      price:
        minimum: 0.1
        type: number
    required:
    - description
    - name
    - price
    type: object
  forms.Rating:
    properties:
      value:
        maximum: 5
        minimum: 0
        type: integer
    type: object
  forms.Signup:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
      phone_number:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - phone_number
    type: object
  models.Cart:
    properties:
      cart_id:
        type: string
      date_created:
        type: string
      date_updated:
        type: string
    type: object
  models.CartItem:
    properties:
      cart:
        $ref: '#/definitions/models.Cart'
      cart_items:
        items:
          $ref: '#/definitions/models.Item'
        type: array
      total_price:
        type: number
    type: object
  models.Item:
    properties:
      date_created:
        type: string
      date_updated:
        type: string
      product:
        $ref: '#/definitions/models.Product'
      quantity:
        type: integer
    type: object
  models.Product:
    properties:
      date_created:
        type: string
      date_updated:
        type: string
      description:
        type: string
      id:
        type: string
      image:
        type: string
      name:
        type: string
      price:
        type: number
      user_id:
        type: string
    type: object
  models.Rating:
    properties:
      date_created:
        type: string
      date_updated:
        type: string
      product_id:
        type: string
      user_id:
        type: string
      value:
        type: integer
    type: object
  models.User:
    properties:
      date_created:
        type: string
      date_updated:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      user_id:
        type: string
    type: object
  response.ErrorMessage:
    properties:
      code:
        example: 400
        type: integer
      error: {}
      message:
        example: error when fetching
        type: string
      status:
        example: failure
        type: string
    type: object
  response.SuccessMessage:
    properties:
      code:
        example: 200
        type: integer
      data: {}
      message:
        example: fetched successfully
        type: string
      status:
        example: success
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: bobdence@gmail.com
    name: Confidence James
    url: http://github.com/jamesconfy
  description: An e-commerce-api.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: E-Commerce-Api
  version: "1.0"
paths:
  /carts/:
    delete:
      description: Clear a user's cart i.e delete all items in the cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Clear cart route
      tags:
      - Cart
    get:
      description: Get a user's cart details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Cart'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Get cart route
      tags:
      - Cart
  /items:
    get:
      description: Get all items in a user cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.CartItem'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Get items route
      tags:
      - Item
    post:
      consumes:
      - application/json
      description: Add cart item to user cart
      parameters:
      - description: Cart item
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.CartItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Item'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Add cart item route
      tags:
      - Item
  /items/:productId:
    delete:
      description: Delete an item in a user cart using product id
      parameters:
      - description: Product id
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Delete item route
      tags:
      - Item
    get:
      description: Get an item in a user cart using product id
      parameters:
      - description: Product id
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Item'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Get item route
      tags:
      - Item
  /products:
    get:
      description: Provide page number to fetch products
      parameters:
      - description: Page
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: asc
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      summary: Get all product route
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Add a product to the database
      parameters:
      - description: Product details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Add product route
      tags:
      - Product
  /products/:productId:
    delete:
      description: Delete a product by it's id
      parameters:
      - description: Product Id
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Delete product route
      tags:
      - Product
    get:
      description: Get a product when provided with the id
      parameters:
      - description: Product Id
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      summary: Get product route
      tags:
      - Product
    patch:
      description: Edit a product by providing both a request and the product id
      parameters:
      - description: Product Id
        in: path
        name: productId
        required: true
        type: string
      - description: Edit product request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.EditProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Edit product route
      tags:
      - Product
  /products/:productId/ratings:
    post:
      description: Add a rating to a product
      parameters:
      - description: Product Id
        in: path
        name: productId
        required: true
        type: string
      - description: Add rating request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.Rating'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Rating'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Add rating route
      tags:
      - Product
  /users/:userId:
    get:
      description: Get user by id
      parameters:
      - description: User id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      summary: Get user by id route
      tags:
      - User
  /users/login:
    post:
      consumes:
      - application/json
      description: Login route
      parameters:
      - description: Login Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      summary: Login route
      tags:
      - User
  /users/logout:
    post:
      description: Logout user
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Logout user route
      tags:
      - User
  /users/profile:
    delete:
      description: Delete user
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Delete user route
      tags:
      - User
    get:
      description: Get user by id
      parameters:
      - description: User id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      summary: Get user by id route
      tags:
      - User
    patch:
      description: Edit user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Edit user route
      tags:
      - User
  /users/signup:
    post:
      consumes:
      - application/json
      description: Register route
      parameters:
      - description: Signup Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.Signup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      summary: Register route
      tags:
      - User
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorisation
    type: apiKey
swagger: "2.0"
